<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R Markdown on Yongfu&#39;s Blog</title><link>https://yongfu.name/tags/r-markdown/</link><description>Recent content in R Markdown on Yongfu&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yongfu.name/tags/r-markdown/feed.xml" rel="self" type="application/rss+xml"/><item><title>Getting Tabular Data Through JavaScript in Compiled R Markdown Documents</title><link>https://yongfu.name/2020/09/09/getable/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/09/09/getable/</guid><description>Recently, I have learned more about JavaScript and created a few JS web apps. This gave me the idea that we can separate the content and the data in an HTML document to make it more dynamic&amp;mdash;the content stays static while the data could be updated independently without rewriting or recompiling the HTML document. This could be done by utilizing JavaScript&amp;rsquo;s ability to asynchronously fetch data from the web and generate DOM elements based on these data.</description></item><item><title>Tips to Reduce the Complexity of Slide Making with Xaringan</title><link>https://yongfu.name/2019/04/29/xaringan_tips/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/04/29/xaringan_tips/</guid><description>Although I&amp;rsquo;m a strong believer in R Markdown, I&amp;rsquo;m not so sure about it in the realm of slide making. After using GUI slide making tools such as Powerpoint or Google Slides for years, it is not easy to get used to making slides with markdown, since it requires additional processing in the brain &amp;ndash; the conversion between images in the brain and the markup language to create them on the slides.</description></item><item><title>Wrapper of knitr::include_graphics to Handle URLs &amp; PDF Outputs</title><link>https://yongfu.name/2019/03/10/include_graphics2/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/03/10/include_graphics2/</guid><description>Those who use knitr::include_graphics() frequently in their R Markdown files may discover some inconsistencies (from the user point of view) if the same Rmd is used for multiple output formats, especially when PDF (LaTeX) is involved.
The following code works fine for HTML outputs but fails when the outputs are PDFs:
knitr::include_graphics(&#39;local.gif&#39;) knitr::include_graphics(&#39;https://commonmark.org/images/markdown-mark.png&#39;) The first case is obvious since it&amp;rsquo;s impossible to include a GIF in a PDF document.</description></item><item><title>ntuthesis</title><link>https://yongfu.name/2019/03/07/ntuthesis/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/03/07/ntuthesis/</guid><description>去年十月份的研究所甄試，實在找不到合乎主題的文章報告可以附在審查資料。想想自己可以拿來說嘴的大概只剩 R Markdown，於是寫了一篇 (硬是扯上語言學的) 文章交了上去。為了怕被面試老師問：「你在文章中說的可信嗎？文章中哪裡可看出你的研究能力？」便在文章中引用自己撰寫的套件1。由於還是害怕文章太過空泛，又將文章中的部份想法 &amp;ndash; R Markdown 模板，實作出來以備不時之需，ntuthesis 因而誕生了。結果 &amp;hellip; 面試時，老師們根本沒有問到有關 R Markdown 的問題。
緣起 這個用 R Markdown 寫論文的想法，其實在一年多前剛認識 R Markdown 時時就有了。當時還不太確定是否可行，僅覺得如果可行的話一定會很有趣。現在，我百分百確定這是可行的 、九成九確定它能幫你省下論文排版的功夫。
ntuthesis 原本僅是個 bookdown (R Markdown 的一個擴充) 論文模板，但為了讓其便於使用，我將它作成套件。ntuthesis 的目的只有一個 &amp;ndash; 讓作者能專注在論文內容的寫作。其它論文寫作的麻煩事：排版、口試委員審定書、目錄、圖目錄、表目錄、文獻引用格式、浮水印，全部都能自動生成。論文模板的概念並不新穎，且現存許多 LaTeX 論文模板。但撰寫 LaTeX 的過程非常辛苦，因為作者必須時時將注意力放在論文排版上。相對的，ntuthesis 讓作者能用 Markdown 撰寫論文，甚至可使用 R 語言直接在論文中動態產生結果 (如統計圖、數值與報表)。
總是需要跨出第一步 現在的問題是，臺灣還沒有人用過 ntuthesis 撰寫論文，而當「第一位」總是相當可怕的，更何況還要脫離自己習慣的寫作環境 (例如，MS Word)。作為 ntuthesis 的作者，我一定會用 ntuthesis 撰寫論文，但不會是在短期內 (我才剛錄取研究所)。所以這篇文章的目的基本上有兩個：
推銷 ntuthesis：
尋找願意使用 ntuthesis 撰寫論文的研究生
為 ntuthesis 擔保2：
你專心寫論文，我負責處理論文格式。
如果使用 ntuthesis 撰寫臺大3論文，你只要擔心論文的內容，任何套件相關的問題 (如排版設定不正確、bug、說明文件不清楚等) 我都會 (盡力) 協助解決 (不擺爛)。</description></item><item><title>Inserting “Edit on GitHub” Buttons in a Single R Markdown Document</title><link>https://yongfu.name/2019/02/10/rmd_edit_btn/</link><pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/02/10/rmd_edit_btn/</guid><description>As the R Markdown ecosystem becomes larger, users now may encounter situations where they have to make decisions on which output format of R Markdown to use. One may found none of the formats suitable – the features essential to the output document one wants may scatter across different output formats of R Markdown.
Here is a real example I encountered. I wanted to create a document that:
supports bookdown syntax, e.</description></item><item><title>網路時代下的寫作</title><link>https://yongfu.name/2019/01/22/write-in-rmd/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/01/22/write-in-rmd/</guid><description>這篇文章並非 R Markdown 的教學文1，而是一篇企圖說服讀者採用 R Markdown 作為寫作工具的文章。本文以 R Markdown 撰寫並使用 blogdown 輸出部落格文章。原始碼託管於 GitHub。
從第一次接觸 R Markdown 至今經過了一年又三個月。而最近六個多月，我都沒有使用過 Microsoft Word 寫東西，因為 R Markdown 強大的功能使我得以不用 Word 也能生存 – 我用 R Markdown 寫作業、文章、書、論文和部落格 (本文)，製作筆記、投影片、甚至網頁。事實上，這正是 R Markdown 最吸引人的地方：
用相同的語法撰寫各式類型的文件。
兩種媒介：紙本 vs. 網頁 寫作的目的有一部分是要給人看，因此排版自然而然就成為作者的工作之一。在文字普及後的絕大多數時間，排版僅需要考慮紙本印刷物。即使十幾年前電腦已十分盛行，排版軟體仍主要在解決紙本印刷物的排版問題。這本身不是個問題，但今日網路已成為主流的資訊傳播管道，網頁因而成為與紙本同等 (甚至更加) 重要的文字承載媒介。
這對文字工作者2造成了新的負擔，因為兩種不同的文字承載媒介 – 紙本與網頁，在歷史上各自衍生出兩種設計邏輯十分迥異的排版系統， \(\TeX\) 以及 HTML，而這兩種系統彼此是無法 (輕易) 相互轉換的 (例如，嘗試使用 Chrome 將網頁轉存成 PDF 時，你會發現一張圖片常被分割在不同頁面)。因此，今日的文字工作者在寫作前得先回答一個問題：
我的作品會活在網路上還是要印出來？
兩種工具：WYSIWYG vs. WYSIWYM 上一段內容或許對許多人來說相當陌生，因為我們都是用 Microsoft Word 長大的，根本不知道什麼是 \(\TeX\)。MS Word 和 \(\TeX\) 一樣，皆是以紙本排版為目的而設計，但 MS Word 不同於 \(\TeX\) 在於其為所見即所得 (What You See Is What You Get, WYSIWYG) 的排版軟體，讓使用者不須接觸到複雜的標記式語言 (Markup Language)3。但簡潔的使用界面需付出代價 – 複雜的檔案格式4，因而較難進行檔案管理5。</description></item><item><title>Create a Glossary in R Markdown</title><link>https://yongfu.name/2018/10/24/glossary-maker/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://yongfu.name/2018/10/24/glossary-maker/</guid><description>I was thinking about creating a glossary in bookdown and found out that there was already an issue about it. I like Yihui’s recommendation: use Pandoc’s definition lists. This was exactly what I had been doing, but I quickly found out that there was a major drawback – the definition lists won’t order alphabetically unless written in that way.
So I wrote an R function to reorder the definition lists written in R Markdown.</description></item><item><title>Easy Linguistics Document Writing with R Markdown</title><link>https://yongfu.name/2018/09/09/linguistics-down/</link><pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate><guid>https://yongfu.name/2018/09/09/linguistics-down/</guid><description>I’ve written a post about rendering IPA symbols properly regardless of the output format of the R Markdown document. I implemented the ideas into an R package, linguisticsdown. linguisticsdown provides a Shiny interface to facilitate inserting IPA symbols in R Markdown. See a quick demo of the current feature of linguisticsdown in the gif at the end of the post.
A live demo is hosted on shinyapps.io. For more details, visit linguisticsdown.</description></item><item><title>Rendering IPA Symbols in R Markdown</title><link>https://yongfu.name/2018/09/06/ipa-symbols/</link><pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate><guid>https://yongfu.name/2018/09/06/ipa-symbols/</guid><description>I was thinking about promoting reproducible research in Linguistics, or more precisely, how to attract people with no programming skills to have incentives to learn at least a bit programming, so that they have the ability to make their research more reproducible. I arrived at the solution: start by adopting R Markdown to write articles (see the last section for details), but making R Markdown more friendly to novices in a particular field of academia is crucial to enhance their incentives to learn programming.</description></item><item><title>Making Jekyll Blog Suitable for R-bloggers</title><link>https://yongfu.name/2018/08/02/rblogger-criteria/</link><pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate><guid>https://yongfu.name/2018/08/02/rblogger-criteria/</guid><description>According to the post add your blog, adding one’s blog to R-bloggers isn’t easy at all, especially for people who use R Markdown to write posts and use Jekyll to generate static web page on GitHub. HUGOMORE42 Two reasons make it difficult:
The feed you submit should ONLY be about R (e.g: with R code, or directly related to the R world/community).
This causes problem because most bloggers write posts spanning several topics, and some blogging platform doesn’t support RSS feed for a particular category of posts.</description></item><item><title>My Notes on R Markdown</title><link>https://yongfu.name/2018/07/23/rmd_intro/</link><pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate><guid>https://yongfu.name/2018/07/23/rmd_intro/</guid><description>I’ve used R Markdown to do lots of work, such as writing a book, doing homework on statistics and ecology, and making web pages. The above mentioned are all HTML output formats from R Markdown, but PDF output formats are also possible, such as this Beamer Slide and an article about R Markdown.
Because of doing so much work with R Markdown, I write down some of the most common and useful features of R Markdown so I can look it up when I need to1.</description></item></channel></rss>