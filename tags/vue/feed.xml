<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vue on Yongfu's Blog</title><link>https://yongfu.name/tags/vue/</link><description>Recent content in vue on Yongfu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yongfu.name/tags/vue/feed.xml" rel="self" type="application/rss+xml"/><item><title>What if I Have No Server?</title><link>https://yongfu.name/2020/05/26/what-if-i-have-no-server/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/05/26/what-if-i-have-no-server/</guid><description>&lt;p>In &lt;a href="https://yongfu.name/2020/04/23/gloss-search.html">my previous post&lt;/a>, I describe how I created a web app that can search and locate patterns in interlinear glosses written in Word documents (&lt;code>docx&lt;/code>) to facilitate the workflow of documenting language. I tried to make the (backend) app &lt;a href="https://github.com/liao961120/gloss-search/blob/master/README-en.md#usage">extremely easy to install&lt;/a>, but still, most of my classmates didn&amp;rsquo;t even try to install it. It is just to frightening for people without any programming experience to install python on their own. Hence, I decided to make the app even more user-friendly. Now, ANYBODY can use the app if she has access to the Internet and a web browser. Just visit &lt;a href="https://glosss.yongfu.name">https://glosss.yongfu.name&lt;/a> and play with the app to see what happens. In this post, I describe how I made the app completely web-based (without setting up a server).&lt;/p>
&lt;h2 id="the-apps-structure">The App&amp;rsquo;s structure&lt;/h2>
&lt;p>In relation to the title of this post, the app is not just web-based, it is also SERVERLESS&amp;mdash;in the sense that there is no backend server listening to the queries entered by the user&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. All searching is done locally in the browser.
To setup the app, I only need a simple server that hosts static files (for the app written in HTML/CSS/JS and the data in JSON format), and &lt;a href="https://pages.github.com">GitHub Pages&lt;/a> is all that is needed. Specifically, I utilized three (free) services in order to allow the users to upload and search the glosses contained in their Word documents:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GitHub Pages&lt;/strong>&lt;br>
GitHub Pages is used to host my app (&lt;a href="https://github.com/liao961120/gloss-search-frontend">&lt;code>liao961120/gloss-search-frontend&lt;/code>&lt;/a>) and the processed JSON data that contains interlinear glosses (originally written in Word documents)&lt;/li>
&lt;li>&lt;strong>Google Drive&lt;/strong>&lt;br>
Users are provided a GD folder to upload their Word documents&lt;/li>
&lt;li>&lt;strong>Travis CI&lt;/strong>&lt;br>
After uploading their Word documents to GD, users can &lt;a href="https://docs.travis-ci.com/user/triggering-builds">trigger a Travis CI build&lt;/a> by clicking &lt;img src="https://bit.ly/2X2r1aQ" style="display:inline;height:1em;width:auto;margin:0"> on the bottom-left corner of the &lt;a href="https://glosss.yongfu.name">app&lt;/a> (password needed). Under the hood, I encrypted my Travis CI&amp;rsquo;s API token so that when the user enters the correct password, a POST request (containing the decrypted token) is sent to Travis CI to trigger a build. During the build, the Word documents saved in Google Drive are download and processed into JSON format and then pushed back to a GitHub repo that hosts the data.&lt;/li>
&lt;/ul>
&lt;p>The figure below summarizes the flow of the app&amp;rsquo;s data:&lt;/p>
&lt;div class="figure">
&lt;img src="https://img.yongfu.name/posts/gloss-search-webbased.png" style="width:100%">
&lt;p class="caption">Figure 1: The numbers annotated to the arrows indicate the order of the execution. Processes with annotated text appended with &lt;img src="https://img.yongfu.name/icon/user.png" style="display:inline;height:1em;width:auto;margin:0"> indicate that they are triggered by the user. Other processes proceed automatically.&lt;/p>
&lt;/div>
&lt;h2 id="configuration-of-the-travis-build">Configuration of the Travis build&lt;/h2>
&lt;p>Below is the partial configuration&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> of the Travis build that:&lt;/p>
&lt;ol>
&lt;li>download the Word documents from Google Drive&lt;/li>
&lt;li>process the Word documents into a JSON file (and a log file)&lt;/li>
&lt;li>push the resulting files to &lt;a href="https://github.com/liao961120/gloss-search/tree/gh-pages">&lt;code>gloss-search:gh-pages&lt;/code>&lt;/a> (set up in the &lt;code>deploy: &lt;/code> section)&lt;/li>
&lt;/ol>
&lt;p>(1) and (2) is done in the script &lt;a href="https://github.com/liao961120/gloss-search/blob/master/GlossProcessor.py">&lt;code>GlossProcessor.py&lt;/code>&lt;/a>. In the script, I call &lt;a href="https://github.com/GitHub30/gdrive.sh">&lt;code>GitHub30/gdrive.sh&lt;/code>&lt;/a> to download files from Google Drive (this really saved me a large amount of time). Then I use the module &lt;code>python-docx&lt;/code> (described in my previous post) to process the Word documents into a structured JSON file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#f92672">python&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> - &lt;span style="color:#e6db74">&amp;#34;3.7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#f92672">install&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> - &lt;span style="color:#ae81ff">pip install python-docx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#75715e"># command to run tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> - &lt;span style="color:#ae81ff">python3 GlossProcessor.py https://drive.google.com/drive/folders/${BUDAI_RUKAI}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#f92672">skip-cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>: &lt;span style="color:#ae81ff">$GH_TOKEN &lt;/span> &lt;span style="color:#75715e"># Set in travis-ci.org dashboard, marked secure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#f92672">keep-history&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="encryptdecrypt-api-token-in-javascript">Encrypt/Decrypt API token in JavaScript&lt;/h2>
&lt;p>Travis CI is normally used as a testing service, but since code is tested by scripts, one can actually write scripts that do things other than testing. Since &lt;a href="https://bookdown.org/yihui/bookdown/github.html">my discovery of using Travis CI to render R Markdown&lt;/a> in the R community, a lot of creative ideas came to me (e.g., using &lt;a href="https://docs.travis-ci.com/user/cron-jobs">Travis Cron Jobs&lt;/a> to regularly &lt;a href="https://yongfu.name/2019/02/17/visualize-language-loss.html">update plots depending on the data from a survey&lt;/a>).&lt;/p>
&lt;p>Usually, a Travis build is triggered by a push to the GiHub repo, a pull request, or a preset cron job. A more advanced way to trigger builds is to utilize Travis CI&amp;rsquo;s API. As described in the &lt;a href="https://docs.travis-ci.com/user/triggering-builds">API document&lt;/a>, to trigger a build on a repo (e.g., &lt;code>liao961120/gloss-search&lt;/code>), one need to send a POST request to the endpoint &lt;code>https://api.travis-ci.org/repo/liao961120%2Fgloss-search/requests&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> along with the API token provided by Travis CI. The JS (Vue) code below is used for sending the POST request to Travis CI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#a6e22e">triggerBuild&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://api.travis-ci.org/repo/liao961120%2Fgloss-search/requests&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#a6e22e">request&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#a6e22e">branch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;master&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Trigger build from glosss.yongfu.name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">decryptedText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">CryptoJS&lt;/span>.&lt;span style="color:#a6e22e">AES&lt;/span>.&lt;span style="color:#a6e22e">decrypt&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">build_token&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">build_psswd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> ).&lt;span style="color:#a6e22e">toString&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">CryptoJS&lt;/span>.&lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">Utf8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Accept&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;Travis-API-Version&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Authorization&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`token &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">decryptedText&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">$http&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>, { &lt;span style="color:#a6e22e">headers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span> }).&lt;span style="color:#a6e22e">then&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#a6e22e">response&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#a6e22e">response&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the variable &lt;code>decryptedText&lt;/code> in the code above.
To prevent my API token from being exposed to the public, I have to encrypt my API token. The encrypted token is saved in the variable &lt;code>build_token&lt;/code>, and the password to decrypt the encrypted token is given to the users privately. To trigger a build with the app, the user needs to enter the correct password (saved to the variable &lt;code>build_psswd&lt;/code>). After the user enters the password, the app can then decrypt the encrypted token to the original API token. The API token is then placed in the POST request header (&lt;code>Authorization: `token ${decryptedText}`&lt;/code>) and send to Travis CI.
The encryption and decryption of the API token is done with &lt;a href="https://github.com/tpenaranda/vue-cryptojs">a Vue wrapper&lt;/a> of the JS library &lt;a href="https://github.com/brix/crypto-js">&lt;code>crypto-js&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>A rough way to think of this new app (as compared to &lt;a href="https://yongfu.name/2020/04/23/gloss-search.html">the previous one&lt;/a>) is that the functionality of the backend part of the app (i.e., data preprocessing in Python) is replaceced by Travis CI. The old app listens on local file changes in the Word docuemnts, but Travis CI can never provide this functionality. However, the benefit of ease of use (no need to startup a server) is huge as compared to real-time data update provided by a backend server.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>For the full configuration, see &lt;a href="https://github.com/liao961120/gloss-search/blob/master/.travis.yml">https://github.com/liao961120/gloss-search/blob/master/.travis.yml&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Note that the slash separating &lt;code>liao961120&lt;/code> and &lt;code>gloss-search&lt;/code> needs to be converted to &lt;code>%2F&lt;/code> to prevent interpreting &lt;code>liao961120/gloss-search&lt;/code> as different URL segments.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>Travis-CI</category><category>JavaScript</category><category>vue</category></item><item><title>Searching Interlinear Glosses Written in Word Documents</title><link>https://yongfu.name/2020/04/23/gloss-search/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/04/23/gloss-search/</guid><description>&lt;p>I am taking the course &lt;a href="https://nol2.aca.ntu.edu.tw/nol/coursesearch/print_table.php?course_id=142%20M0210&amp;amp;class=&amp;amp;dpt_code=1420&amp;amp;ser_no=10017&amp;amp;semester=108-2&amp;amp;lang=EN">Linguistic Fieldwork&lt;/a> this semester. Each week, we record and transcribe Budai Rukai, an Austronesian language spoken by &lt;a href="https://en.wikipedia.org/wiki/Rukai_people">Rukai people (魯凱族)&lt;/a>. The resulting data (interlinear glosses) are written in a Word document (&lt;code>.docx&lt;/code>) as required by the course instructor. Things get worse as the number of documents accumulates each week, since it becomes harder to locate specific linguistic patterns in the corpus of texts, as they are spread across multiple documents.&lt;/p>
&lt;p>Inspired by &lt;a href="https://github.com/puerdon/corpus_processor">the work&lt;/a> of my labmate, &lt;a href="https://github.com/puerdon">Don&lt;/a>, I created a web app for searching interlinear glosses, which can search for and locate specific patterns in a collection of Word documents. This post describe the web app&amp;rsquo;s basic design and improvements to &lt;a href="https://github.com/puerdon/corpus_processor">&lt;code>puerdon/corpus_processor&lt;/code>&lt;/a>, the project this web app got inspiration and succeeded from. For instructions about using the app, visit &lt;a href="https://github.com/liao961120/gloss-search">&lt;code>liao961120/gloss-search&lt;/code>&lt;/a> (&lt;a href="https://github.com/liao961120/gloss-search/blob/master/README-en.md">English&lt;/a>) for more details.&lt;/p>
&lt;img src="https://img.yongfu.name/gif/gloss-search.gif" style="width:100%">
&lt;h2 id="basic-design">Basic Design&lt;/h2>
&lt;p>The app&amp;rsquo;s frontend was built with &lt;a href="https://vuejs.org">Vue.js&lt;/a>, and the backend was written in &lt;a href="https://python.org">Python 3&lt;/a>. The frontend was designed to ease the search and locating of certain patterns in the Word documents and is the only interface the users need to interact with. The backend is used to (1) parse the glosses written in Word documents into Python objects (dictionaries) and (2) perform the search on these Python objects based on the requests sent from the frontend.&lt;/p>
&lt;h2 id="backend">Backend&lt;/h2>
&lt;p>The most challenging part of the backend program is that of (1) since Word is a &lt;a href="https://en.wikipedia.org/wiki/WYSIWYG">WYSIWYG&lt;/a> editing software, which means that two Word documents could have the exact same appearance while differ in their underlying structures. In other words, without considering the fact that different users differ in the way they use Word, the naive code used to parse Word documents are doomed to fail, even though the users SEEM to stick to a particular format. In order to deal with this problem, some kind of &lt;em>normalization&lt;/em> needs to be done to all the Word documents such that documents that look the same are INDEED the same. The format of the Word document provided by our course instructor is as below:&lt;/p>
&lt;pre tabindex="0">&lt;code>[Number].
[Original language (optional)]
[EMPTY LINE (optional)]
[Gloss line 1 (original language)]
[Gloss line 2 (English)]
[Gloss line 3 (Mandarin)]
[EMPTY LINE]
#e [English translation]
#c [Chinese translation]
#n [Notes]
[EMPTY LINE]
&lt;/code>&lt;/pre>&lt;p>Below is an illustration of what it &amp;rsquo;looks&amp;rsquo; like in a Word document of interlinear glosses:&lt;/p>
&lt;img src="https://img.yongfu.name/posts/gloss-example.png" style="width:75%">
&lt;p>When you press &lt;code>Enter&lt;/code> on the keyboard while editing a Word document, you SEEM to be creating a &lt;strong>line break&lt;/strong>, but, in fact, you are creating a &lt;strong>new paragraph&lt;/strong>. To create a line break without breaking the current paragraph, &lt;code>Shift + Enter&lt;/code> instead of &lt;code>Enter&lt;/code> should be pressed. This is an example of the user behaviors I needed to normalize before I can sucessfully parse the Word documents.&lt;/p>
&lt;p>To do this in Python, I extract all the paragraphs in a Word document using the module &lt;a href="https://python-docx.readthedocs.io/en/latest">&lt;code>python-docx&lt;/code>&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and concatenate them with newline characters (&lt;code>\n&lt;/code>) into a large string. Then, I split the string by &lt;code>\n&lt;/code> into a list of lines, from which the starting and ending positions (the positions where &lt;code>[gloss num].&lt;/code> is found in the list) of each elicitation could be located by simple pattern matching:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#f92672">from&lt;/span> docx &lt;span style="color:#f92672">import&lt;/span> Document
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">process_doc&lt;/span>(fp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;corp/20200325.docx&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#75715e"># Normalize document into a list of lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> d &lt;span style="color:#f92672">=&lt;/span> Document(fp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> a_doc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(p&lt;span style="color:#f92672">.&lt;/span>text &lt;span style="color:#66d9ef">for&lt;/span> p &lt;span style="color:#f92672">in&lt;/span> d&lt;span style="color:#f92672">.&lt;/span>paragraphs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> a_doc &lt;span style="color:#f92672">=&lt;/span> a_doc&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#75715e"># Find the positions of each elicitation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> pat_start &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>compile(&lt;span style="color:#e6db74">&amp;#34;^(\d{1,2})\.\s*$&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> glosses_on &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> gloss_num_old &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, line &lt;span style="color:#f92672">in&lt;/span> enumerate(a_doc):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> pat_start&lt;span style="color:#f92672">.&lt;/span>match(line):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> gloss_num_new &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#75715e"># Save each elicitation range&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> gloss_num_old &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> glosses_on&lt;span style="color:#f92672">.&lt;/span>append( (gloss_num_old, gloss_num_new &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> gloss_num_old &lt;span style="color:#f92672">=&lt;/span> gloss_num_new
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#75715e"># Save last gloss&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> i &lt;span style="color:#f92672">=&lt;/span> gloss_num_old
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> i &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> a_doc[i]&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>startswith(&lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(a_doc) &lt;span style="color:#f92672">==&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> (&lt;span style="color:#f92672">not&lt;/span> a_doc[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>startswith(&lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span>)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> end_idx &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> glosses_on&lt;span style="color:#f92672">.&lt;/span>append( (gloss_num_old, i) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#75715e"># Get all elicitations in the document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> glosses &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> start, end &lt;span style="color:#f92672">in&lt;/span> glosses_on:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span> gloss_num &lt;span style="color:#f92672">=&lt;/span> int(re&lt;span style="color:#f92672">.&lt;/span>match(&lt;span style="color:#e6db74">&amp;#34;(\d+)\.&amp;#34;&lt;/span>, a_doc[start])[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> gloss_lines &lt;span style="color:#f92672">=&lt;/span> [ l&lt;span style="color:#f92672">.&lt;/span>strip() &lt;span style="color:#66d9ef">for&lt;/span> l &lt;span style="color:#f92672">in&lt;/span> a_doc[(start &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):end] ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> glosses&lt;span style="color:#f92672">.&lt;/span>append( (gloss_num, gloss_lines) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> glosses
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One major improvement to &lt;a href="https://github.com/puerdon/corpus_processor">&lt;code>puerdon/corpus_processor&lt;/code>&lt;/a> is dealing with gloss lines that span multiple lines, as exemplified in the code chunk below. This problem can be solved by removing all empty lines between the gloss lines and free lines (those starting with &lt;code>#e&lt;/code>, &lt;code>#c&lt;/code>, and &lt;code>#n&lt;/code>) such that, when the free lines are excluded, the number of gloss lines &lt;strong>must&lt;/strong> be multiples of three (the example below has 6 gloss lines in total). Normalizing each elicitation to this format allows me to concatenate multiple gloss lines into three for all elicitaion examples. The code that deal with this can be found in the function &lt;code>assign_gloss_free_lines()&lt;/code> in &lt;a href="https://github.com/liao961120/gloss-search/blob/master/GlossProcessor.py">&lt;code>GlossProcessor.py&lt;/code>&lt;/a>.&lt;/p>
&lt;pre tabindex="0">&lt;code>14.
kay Elrenge watsili kay malri ki lalake ki talialalay
kay Elrenge w-a-tsili kay malri
this Elrenge AF-RLS-throw this ball
這 Elrenge 主焦-實現-丟 這 球
ki lalake ki talialalay
OBL kid _ noble
斜格 小孩 _ 貴族
#e Elrenge throw a ball to the noble’s kid.
#c 這 Elrenge 丟一顆球給貴族的小孩
#n
&lt;/code>&lt;/pre>&lt;p>After normalizing the Word documents, the documents are parsed and convert into the Python dictionary as shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;20200325.docx&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> (&lt;span style="color:#ae81ff">1&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;ori&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;yakay&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;tatulru&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;ababay&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;agili&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;gloss&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;yakay&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;have&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;有&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;three&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;tatulru&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;female/male&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;女性/男性&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;(ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;yonger_brother/sister-1SG.POSS&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;弟妹-我的.第一人稱單數.所有格&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;ababay/sauvalay)&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;ku&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> (&lt;span style="color:#e6db74">&amp;#39;agi-li&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;_&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;free&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;#e I have 3 younger brother/sister&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;#c 我有 3 個弟弟/妹妹&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;#n yakay ku 可省略&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> (&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">...&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#39;20200408.docx&amp;#39;&lt;/span>: [&lt;span style="color:#f92672">...&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="frontend">Frontend&lt;/h2>
&lt;p>The construction of the frontend was relatively easy, given that the most challenging part was already done in &lt;a href="https://yongfu.name/2020/02/22/leipzigVue.html">my (dead) project on building a web app for interlinear glossing&lt;/a>. In brief, the component &lt;a href="https://github.com/liao961120/gloss-search-frontend/blob/master/src/components/Leipzig.vue">&lt;code>Leipzig.vue&lt;/code>&lt;/a> is used to construct the aligned glosses (see figure below) from the data sent from backend (i.e., the python dictionary in the previous section, converted to JSON format).&lt;/p>
&lt;img src="https://img.yongfu.name/posts/leipzig.js.png" style="width: 70%; float: center;">
&lt;p>Another relatively challenging part (to me) is implementing the highlighting function, which highlights the matching patterns in the glosses (as in the words with yellow background in the figure above). It was implemented by creating a &lt;a href="https://vuejs.org/v2/guide/computed.html">computed property&lt;/a> that wraps the parts of the data matching the search pattern into HTML &lt;code>&amp;lt;span class=&amp;quot;matchedtoken&amp;quot;&amp;gt;&lt;/code> tags. I can then use CSS to decorate these tags.&lt;/p>
&lt;p>The remaining parts of the fontend are about communicating with the server, which are relatively easy to set up. I actually just copy-and-pasted the code from my previous &lt;a href="https://github.com/liao961120/kwic/blob/master/src/components/kwic.vue">KWIC concordancer project&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I didn&amp;rsquo;t spent much time exploring the API of &lt;a href="https://python-docx.readthedocs.io/en/latest/">&lt;code>python-docx&lt;/code>&lt;/a> thanks to Don&amp;rsquo;s PIONEERING (at least in our university, or even Taiwan, I believe) project &lt;a href="https://github.com/puerdon/corpus_processor">&lt;code>puerdon/corpus_processor&lt;/code>&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>Linguistics</category><category>Python</category><category>vue</category></item><item><title>以 Python 實作 Concordancer</title><link>https://yongfu.name/2020/03/20/building-concordancer/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/03/20/building-concordancer/</guid><description>&lt;p>每次接近學期末的時候，寫程式癮就會開始發作 (可能是不想面對無趣的期末報告)，這時候腦袋會蹦出許多很有趣的想法，然後就會迫不及待地想將這些想法實作出來。這次(2019 年末) 的程式癮刺激來源是實驗室的雲端硬碟裡的某個 (版權封閉) 中文語料庫，雖然該語料庫已有很好的搜尋界面，但&lt;strong>我就是想 reinvent the wheel&lt;/strong>，自己手刻出一個 concordancer。不為了什麼，就只是因為這件事本身就很有樂趣。&lt;/p>
&lt;h2 id="初步嘗試for-loop-forever">初步嘗試：for loop&amp;hellip; forever&lt;/h2>
&lt;p>我本來並沒有太大的雄心壯志，就只想快速弄出個程式界面方便我查找 concordance，想說使用 &lt;a href="https://www.nltk.org/book/ch01.html#searching-text">NLTK concordance&lt;/a> 應該很快就可以弄出我想的東西。但 NLTK concordance 只能使用 word form (或 pattern) 去搜尋 concordance，我的需求卻是要能&lt;strong>使用 word form 或 PoS tag&lt;/strong> 搜尋語料庫 (類似 &lt;a href="http://cwb.sourceforge.net/files/CQP_Tutorial/CQP_Tutorial.html">Corpus Query Langauge&lt;/a>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，但不用這麼複雜)。但要自己用 Python 實作這個功能也頗簡單，於是我就自己手刻了這個功能。然而事實證明我太過天真了。語料庫的大小約 1000 萬個 token，而每次搜尋時，我的程式使用 for 迴圈跑過整個語料，因此要花非常非常非常久的時間才能完成搜尋。對於非資訊背景出生的我，第一次體驗 $O(n)$ 是件不可忽視的問題以及 Database 存在的必要性。&lt;/p>
&lt;h2 id="重新規劃-database--python--vue">重新規劃： Database + Python + Vue&lt;/h2>
&lt;p>為了解決上述問題我暫時擱置了這個專案 (寒假開始到春節期間) 去學習必備的一些知識&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，最後比較有系統地重新規劃了這個 concordancer 的架構：&lt;/p>
&lt;img src="https://img.yongfu.name/posts/concordancer-design.png" style="width:100%">
&lt;p>這個新的架構分成前&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>、後端，前端不是本文的重點 (原始碼&lt;a href="https://github.com/liao961120/kwic">在此&lt;/a>)，就不細談。這邊直接舉一個實例說明這個 concordancer 如何運作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先，使用者在前端輸入一個搜尋的字串 (keyword)，這個字串需符特定的格式：&lt;code>[token 1][token 2][token 3]&lt;/code>。每對中括號代表一個 token，中括號內則是描述此 token 的特徵，如 word form 與 PoS tag，例如 &lt;code>[word=&amp;quot;打&amp;quot; pos=&amp;quot;V.*&amp;quot;]&lt;/code> 即是要搜尋 word form 為 &lt;code>打&lt;/code> 且詞類為動詞&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> 的 token。這裡的例子使用 &lt;strong>&lt;code>[word.regex=&amp;quot;^[他她]$&amp;quot;][word=&amp;quot;打&amp;quot; pos=&amp;quot;V.*&amp;quot;]&lt;/code>&lt;/strong>，下方的幾個例子都是符合這個搜尋的 2-gram:&lt;/p>
&lt;ul>
&lt;li>&lt;code>他/Nh 打/VC&lt;/code>&lt;/li>
&lt;li>&lt;code>她/Nh 打/VC&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>[word.regex=&amp;quot;^[他她]$&amp;quot;][word=&amp;quot;打&amp;quot; pos=&amp;quot;V.*&amp;quot;]&lt;/code>&lt;/strong> 在傳給後端後，會先經過一個 &lt;a href="https://yongfu.name/kwic-backend/html/doc/queryParser.html">parser&lt;/a> 處理，讓後端可以將這個 query 轉換成 SQL 去搜尋 database。在搜尋時，這邊僅會在 DB 中以&lt;strong>其中一個 token 的資訊進行搜尋&lt;/strong>，並回傳所有符合的 token 於語料庫中的位置 (所在文件之 id、第幾個句子、token 於句子中的次序)。這些 token 是&lt;strong>可能符合 keyword pattern 的「候選者」&lt;/strong> ，讓接下來的 n-gram 比對可以更快速 (search space 從整個語料庫減少到只剩這些「候選者」所組成的 n-gram)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>透過這些 token 的位置資訊，可以找出含有該 token 的 n-gram。例如，假設這裡使用 &lt;code>[word=&amp;quot;打&amp;quot; pos=&amp;quot;V.*&amp;quot;]&lt;/code> 在 DB 當中搜尋，取得結果後，可以再比對此 token &lt;strong>左邊&lt;/strong>的 token 是否符合 &lt;code>[word.regex=&amp;quot;^[他她]$&amp;quot;]&lt;/code>。若符合，則保留此 2-gram，並取得該 2-gram 左右的 context，作為未來要回傳給使用者的 KWIC concordance。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跑完所有的「候選者」token，即可取得整個語料庫內，符合 keyword pattern 的 concordance。接下來僅需將資料轉換成 JSON 格式再傳到前端即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="database-設計">Database 設計&lt;/h2>
&lt;p>下圖是 Database&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> 的 table 設計，共有 3 個 table:&lt;/p>
&lt;img src="https://img.yongfu.name/posts/db-design.png" style="width:100%">
&lt;ul>
&lt;li>&lt;strong>Token&lt;/strong>: 將語料庫中的每種 token (即 type) 對應至 id。如此搜尋單一 token 的 word form 時，即可搜尋此較小的 table (列數等於語料庫中 type 的數量)，而不用跑過整個語料庫。&lt;/li>
&lt;li>&lt;strong>Pos&lt;/strong>: 將語料庫中的每種 PoS tag 對應至 id。同上，可以快速找出符合的 token。&lt;/li>
&lt;li>&lt;strong>Corpus&lt;/strong>: 保留語料庫 token 位置資訊的 table。搜尋完 &lt;strong>Token&lt;/strong> 以及 &lt;strong>Pos&lt;/strong> 兩 table 之後，即可透過 token 與 pos id 在 &lt;strong>Corpus&lt;/strong> 裡找到符合的列 (e.g., &lt;code>tk_id == 3&lt;/code> (&lt;code>我&lt;/code>) 且 &lt;code>pos_id == 1&lt;/code> (&lt;code>Nh&lt;/code>)。這些列裡面含有這個 token 於語料庫中的位置 (&lt;code>text_id&lt;/code>, &lt;code>sent_idx&lt;/code>, &lt;code>tk_idx&lt;/code>)。&lt;/li>
&lt;/ul>
&lt;h2 id="原始碼--使用語料庫">原始碼 / 使用語料庫&lt;/h2>
&lt;p>這個專案一開始是使用版權封閉的語料庫製作，因此語料庫的資料並未放在 GitHub，但後端的原始碼仍放在 &lt;a href="https://github.com/liao961120/kwic-backend">&lt;code>liao961120/kwic-backend&lt;/code>&lt;/a>。&lt;/p>
&lt;p>為了讓這個專案至少能被使用，我另外爬了 &lt;a href="https://github.com/liao961120/dcard-corpus">Dcard 作為語料&lt;/a> (500 多萬詞，大小約平衡語料庫的一半)，並包成 docker image，方便有興趣的人使用。要搜尋 Dcard 語料庫僅需依照下方的步驟：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>取得 docker image (僅第一次需執行)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>docker pull liao961120/dcard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>執行後端 (執行後，請等待 cmd 出現 &lt;code>Corpus Loaded&lt;/code> 的字串)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>docker run -it -p 127.0.0.1:1420:80 liao961120/dcard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>前往 &lt;a href="https://kwic.yongfu.name">https://kwic.yongfu.name&lt;/a> 使用前端界面&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>一開始曾想過直接使用現成的 corpus framework，例如 &lt;a href="http://cwb.sourceforge.net">CWB&lt;/a>, &lt;a href="https://inl.github.io/BlackLab">BlackLab&lt;/a> 等。但一方面研究這些 framework 要花許多精力，且因為研究的都是別人做好的 API，不容易學到比較低階、處理語料的問題。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>快速掃過 &lt;a href="https://cs50.harvard.edu/x/2019">CS50&lt;/a> 的前 5 堂課 (我還是不會 C/C++)、複習之前&lt;a href="https://cs50.harvard.edu/web/#sql">不怎麼認真看待的 SQL Database&lt;/a>以及閱讀 &lt;a href="https://www.sqlite.org/queryplanner.html">SQLite 關於 indexing 的說明文件&lt;/a> (這最重要)。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>雖然本來不打算做前端，但由於花了大量時間學習 Database 的概念，多花個幾小時刻個前端相比之下簡單許多 (這邊前端的功能不多)。&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>這裡的語料是經&lt;a href="https://github.com/ckiplab/ckiptagger">中研院 ckiptagger&lt;/a> 斷詞，可&lt;a href="https://github.com/ckiplab/ckiptagger/wiki/POS-Tags">於此&lt;/a>檢視其詞類標記集。&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>建立資料庫以及索引的原始碼位於 &lt;a href="https://github.com/liao961120/dcard-corpus/blob/master/indexCorp.py">&lt;code>liao961120/dcard-corpus/indexCorp.py&lt;/code>&lt;/a>。&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>Linguistics</category><category>Python</category><category>vue</category><category>docker</category><category>中文</category></item><item><title>Recreating Leipizig.js with Vue for Interlinear Glossing</title><link>https://yongfu.name/2020/02/22/leipzigvue/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/02/22/leipzigvue/</guid><description>&lt;p>I noticed &lt;a href="https://bdchauvette.net/leipzig.js">Leipzig.js&lt;/a> from &lt;a href="https://github.com/agricolamz">George Moroz&lt;/a>&amp;rsquo;s GitHub activity (he starred &lt;a href="https://github.com/bdchauvette/leipzig.js/">&lt;code>bdchauvette/leipzig.js&lt;/code>&lt;/a> a few months ago). This JS library is fantastic, and at the moment I saw it, I came up with an idea of building a web app facilitating interlinear glossing.
During Chinese New Year, I finally started on the project. I thought it would be easy since I had some experience with Vue.js before&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but it turned out that &lt;code>leipzig.js&lt;/code> wasn&amp;rsquo;t designed to work with Vue.&lt;/p>
&lt;h2 id="dynamic-input-interface">Dynamic Input Interface&lt;/h2>
&lt;p>What I had in mind was a web app that, while the user is typing, the rendered glosses get showed &lt;strong>synchronously&lt;/strong> in another panel. Vue&amp;rsquo;s conventional way of doing this is by creating a two-way data binding (&lt;code>v-model&lt;/code>) to capture the user&amp;rsquo;s input and dynamically render the HTML content based on the inputted data. This conflicts with &lt;code>leipzig.js&lt;/code> since it only provides a high level function (&lt;a href="https://github.com/bdchauvette/leipzig.js/wiki/Documentation">&lt;code>Leipzig()&lt;/code>&lt;/a>) to modify existing DOM elements to construct the glosses. Calling &lt;code>Leipzig()&lt;/code> multiple times (without erasing the already rendered HTML) would break the DOM elements, which makes the function hard to work together with Vue&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>After multiple failures of making &lt;code>Leipzig()&lt;/code> to work with Vue, I decided to abandoned &lt;code>leipzig.js&lt;/code> and recreate its functionality with Vue. This wasn&amp;rsquo;t as terrifying as it may seem, since I can use &lt;a href="https://github.com/bdchauvette/leipzig.js/blob/master/dist/leipzig.css">&lt;code>leipzig.js&lt;/code>&amp;rsquo;s CSS rules&lt;/a> directly to help me align the rendered DOM elements by Vue. What I had to do was making sure that Vue generates &lt;a href="https://github.com/bdchauvette/leipzig.js/wiki/Documentation#configclasses">the exact same HTML structure&lt;/a> as &lt;code>leipzig.js&lt;/code>&amp;rsquo;s rendered glosses. The resulting input interface is shown in the GIF below.&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="https://img.yongfu.name/gif/leipzig-vue.gif" alt="Leipzig.js rebuilt with Vue">
&lt;figcaption>Leipzig.js rebuilt with Vue&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The source code of this vue component can be found in &lt;a href="https://github.com/liao961120/gloss/blob/master/src/components/Leipzig.vue">&lt;code>Leipzig.vue&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="other-parts-of-the-app">Other Parts of the App&lt;/h2>
&lt;p>There are several advantages of adopting Vue instead of using traditional JS approaches to build the app. Since what I wanted to build was an app that can also &lt;strong>store, manage, and export glosses&lt;/strong> for the user, I needed a framework to help me manage this complexity (e.g., &lt;a href="https://github.com/liao961120/gloss/blob/master/src/views/Edit.vue">Vuex&lt;/a>), and Vue provides a good and manageable way to build a complex web app. After learning Vuex and experiencing some failures in my previous &lt;a href="https://github.com/liao961120/viewMark">Vue project&lt;/a> (due to increasing complexity as the app grows larger), I&amp;rsquo;m pretty sure that I could build a better app with less complexity this time. But just when I was moving forward to other parts of the app, I was stuck by other work to do, so I&amp;rsquo;m currently not developing this app. Currently, the only usable part of this app is its dynamic input interface for previewing glosses.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In 2019 summer, I learned Vue.js on &lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa">The Net Ninja&amp;rsquo;s YouTube channel&lt;/a> and built a &lt;a href="https://viewmark.yongfu.name">markdown editor&lt;/a> for fun.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Though it is possible to create a dynamic input experience with &lt;code>leipizig.js&lt;/code> with a more traditional JS approach. You can read the &lt;a href="https://bdchauvette.net/leipzig.js/theme/js/demo.js">source code&lt;/a> of this &lt;a href="https://bdchauvette.net/leipzig.js/demo/">Live demo of Leipzig.js&lt;/a> to find out how it works!&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>vue</category><category>JavaScript</category><category>Linguistics</category></item></channel></rss>