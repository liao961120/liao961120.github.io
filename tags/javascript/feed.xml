<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Yongfu's Blog</title><link>https://yongfu.name/tags/javascript/</link><description>Recent content in JavaScript on Yongfu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yongfu.name/tags/javascript/feed.xml" rel="self" type="application/rss+xml"/><item><title>A Timer for Interval Training</title><link>https://yongfu.name/2021/06/06/interval-timer/</link><pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate><guid>https://yongfu.name/2021/06/06/interval-timer/</guid><description>&lt;p>Last year I have tried home workouts since the gym was shutdown for about four months. During that time, I realized that it is harder to maintain the challenge and effectiveness of the workout since few training equipments are available at home. Later I found out that &lt;strong>time&lt;/strong> is a crucial factor to increase the challenge and effectiveness of the training. By incorporating interval training to my workout schedule, I started to see the gains!
During this period, I used &lt;a href="https://intervaltimer.com">intervaltimer.com&lt;/a> to create my own interval training timer. This website (mobile app also available) allows users to build and save their own training timer. It is great, but I&amp;rsquo;m a bit upset with its user interface since it imposes many limitations on how a user can customize the intervals of the timer. In addition, some of the features on the website is locked in the associated mobile app. This has led me to the idea of creating an open source alternative to &lt;a href="https://intervaltimer.com">intervaltimer.com&lt;/a>.&lt;/p>
&lt;p>Recently, the outbreak of COVID-19 in Taiwan spare me quite a lot of time, and I have spent some of the time picking up JavaScript. Last Friday (Jun 4), I was randomly browsing the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML Drag and Drop API&lt;/a>. This reminded me of the interval training timer. After watching a &lt;a href="https://www.youtube.com/watch?v=jfYWwQrtzzY">video&lt;/a> about building sortable drag and drop elements with vanilla JavaScript, I decided that it is time to carry out the project of building an interval timer.&lt;/p>
&lt;p>It has been &lt;a href="https://yongfu.name/2019/07/06/svg2png">almost two years&lt;/a> since I wrote an app in vanilla JavaScript&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. These days, I have been creating apps with JavaScript frameworks like Vue. It is great, but working with vanilla JavaScript is also pleasuring. Switching back and forth between two different ways of creating web apps is joyful, as it gives you the opportunity to think about programming in two quite distinct ways!&lt;/p>
&lt;h2 id="draggable-interval-timer">Draggable Interval Timer&lt;/h2>
&lt;p>To keep the timer minimalist&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, I wrote it in vanilla JavaScript, HTML &amp;amp; CSS (no server required of course). The most important feature of this timer is its &lt;strong>dragging&lt;/strong> functionality, which gives users the flexibility of sorting the exercise blocks at will. Another useful feature is that custom timers created by the user are sharable through URLs. This makes up for the unavailability of the drag and drop API on touch screen devices (e.g. mobile phones) since a user can just create a timer on the PC/laptop and access the timer with a link on her mobile phone. Here is an &lt;a href="https://timer.yongfu.name/?data=_LSB__LB_%22name%22_CL_%22Get%20Ready%22_CM_%22time%22_CL_%225%22_CM_%22color%22_CL_%22_PD_38cdff%22_RB__CM__LB_%22name%22_CL_%22Sit%20up%22_CM_%22time%22_CL_%2245%22_CM_%22color%22_CL_%22_PD_ff0000%22_RB__CM__LB_%22name%22_CL_%22Rest%22_CM_%22time%22_CL_%2215%22_CM_%22color%22_CL_%22_PD_00d423%22_RB__CM__LB_%22name%22_CL_%22Push%20up%22_CM_%22time%22_CL_%2245%22_CM_%22color%22_CL_%22_PD_F76B00%22_RB__CM__LB_%22name%22_CL_%22Rest%22_CM_%22time%22_CL_%2215%22_CM_%22color%22_CL_%22_PD_00d423%22_RB__CM__LB_%22name%22_CL_%22Sit%20up%22_CM_%22time%22_CL_%2245%22_CM_%22color%22_CL_%22_PD_ff0000%22_RB__CM__LB_%22name%22_CL_%22Rest%22_CM_%22time%22_CL_%2215%22_CM_%22color%22_CL_%22_PD_00d423%22_RB__CM__LB_%22name%22_CL_%22Push%20up%22_CM_%22time%22_CL_%2245%22_CM_%22color%22_CL_%22_PD_F76B00%22_RB__CM__LB_%22name%22_CL_%22Rest%22_CM_%22time%22_CL_%2215%22_CM_%22color%22_CL_%22_PD_00d423%22_RB__CM__LB_%22name%22_CL_%22Sit%20up%22_CM_%22time%22_CL_%2245%22_CM_%22color%22_CL_%22_PD_ff0000%22_RB__RSB_">example&lt;/a>!&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="https://raw.githubusercontent.com/liao961120/draggableTimer/main/demo/demo.gif" alt="Draggable Interval Timer">
&lt;figcaption>Draggable Interval Timer&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The timer is available at &lt;a href="https://timer.yongfu.name">timer.yongfu.name&lt;/a> and the source code is on &lt;a href="https://github.com/liao961120/draggableTimer">GitHub&lt;/a>. I&amp;rsquo;m looking forward to seeing your custom interval timers!&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>This is when I started to learn JavaScript &lt;strong>seriously&lt;/strong>, thanks to &lt;a href="https://cs50.harvard.edu/web/2018/">CS50&amp;rsquo;s Web Programming with Python and JavaScript&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>With more functionalities comes more limitations, this is what has happened with &lt;a href="https://intervaltimer.com">intervaltimer.com&lt;/a>, I think.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>JavaScript</category><category>Web Page</category></item><item><title>Getting Tabular Data Through JavaScript in Compiled R Markdown Documents</title><link>https://yongfu.name/2020/09/09/getable/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/09/09/getable/</guid><description>&lt;p>Recently, I have learned more about JavaScript and created a few JS web apps. This gave me the idea that we can separate the &lt;em>content&lt;/em> and the &lt;em>data&lt;/em> in an HTML document to make it more &lt;strong>dynamic&lt;/strong>&amp;mdash;the content stays static while the data could be updated independently without rewriting or recompiling the HTML document. This could be done by utilizing JavaScript&amp;rsquo;s ability to asynchronously fetch data from the web and generate DOM elements based on these data.&lt;/p>
&lt;p>I implemented this idea in my new R package &lt;a href="https://github.com/liao961120/getable">&lt;code>getable&lt;/code>&lt;/a>. Basically, &lt;code>getable&lt;/code> lets the user insert &lt;em>dynamic&lt;/em> HTML tables in R Markdown (HTML output only) by providing the URLs to the tables&amp;rsquo; data. Every time when the compiled HTML document is opened, the data are fetched from the web and used to generate the HTML tables. This means that the user can update the data (e.g., hosted in a public GitHub repo) without recompiling the HTML from R Markdown.
In addition to hosting data in GitHub repos or on static sites, the user could use &lt;strong>Google Spreadsheets&lt;/strong> as the data store, as shown in the GIF below.&lt;/p>
&lt;p>
&lt;img src="https://img.yongfu.name/posts/getable.gif" alt="">
&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>&lt;code>getable&lt;/code> is now on CRAN, which can be installed with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#a6e22e">install.packages&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;getable&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or, install the latest version from GitHub:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>remotes&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">install_github&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;liao961120/getable&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>&lt;code>getable&lt;/code> comes with a template that you can import in RStudio by selecting: &lt;code>File &amp;gt; New File &amp;gt; R Markdown &amp;gt; From Template &amp;gt; HTML Tables with Dynamic Data {GETable}&lt;/code>.&lt;/p>
&lt;p>Or, you can simply run the command below in the R console:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-r" data-lang="r">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>rmarkdown&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">draft&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;name_your_file.Rmd&amp;#34;&lt;/span>, template &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;tablefromweb&amp;#34;&lt;/span>, package &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;getable&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The template contains several files, of which &lt;code>dfFromWeb.html&lt;/code>, &lt;code>dfFromWeb.js&lt;/code>, and &lt;code>dfFromWeb.css&lt;/code> are required for the compiled HTML to work properly (DO NOT change the RELATIVE PATHs between these files and the source Rmd). Note that you can style the appearance of the HTML tables with CSS in &lt;code>dfFromWeb.css&lt;/code>, and if you know a lot about JS, you can even modify the code in &lt;code>dfFromWeb.js&lt;/code> to use other JS libraries to generate the HTML tables. You can see a working example &lt;a href="https://yongfu.name/getable/demo/">here&lt;/a>.&lt;/p>
&lt;h3 id="inserting-tables">Inserting Tables&lt;/h3>
&lt;p>Simply use the function &lt;code>renderTable(&amp;quot;&amp;lt;URL&amp;gt;&amp;quot;)&lt;/code> in a code chunk to insert a dynamic HTML table. Remember to set the chunk option &lt;code>results='asis'&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-rmd" data-lang="rmd">```{r results=&amp;#39;asis&amp;#39;}
getable::renderTable(&amp;#34;https://yongfu.name/getable/demo/data/df.csv&amp;#34;)
```
&lt;/code>&lt;/pre></description><category>R</category><category>R Markdown</category><category>JavaScript</category><category>R-bloggers</category></item><item><title>What if I Have No Server?</title><link>https://yongfu.name/2020/05/26/what-if-i-have-no-server/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/05/26/what-if-i-have-no-server/</guid><description>&lt;p>In &lt;a href="https://yongfu.name/2020/04/23/gloss-search.html">my previous post&lt;/a>, I describe how I created a web app that can search and locate patterns in interlinear glosses written in Word documents (&lt;code>docx&lt;/code>) to facilitate the workflow of documenting language. I tried to make the (backend) app &lt;a href="https://github.com/liao961120/gloss-search/blob/master/README-en.md#usage">extremely easy to install&lt;/a>, but still, most of my classmates didn&amp;rsquo;t even try to install it. It is just to frightening for people without any programming experience to install python on their own. Hence, I decided to make the app even more user-friendly. Now, ANYBODY can use the app if she has access to the Internet and a web browser. Just visit &lt;a href="https://glosss.yongfu.name">https://glosss.yongfu.name&lt;/a> and play with the app to see what happens. In this post, I describe how I made the app completely web-based (without setting up a server).&lt;/p>
&lt;h2 id="the-apps-structure">The App&amp;rsquo;s structure&lt;/h2>
&lt;p>In relation to the title of this post, the app is not just web-based, it is also SERVERLESS&amp;mdash;in the sense that there is no backend server listening to the queries entered by the user&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. All searching is done locally in the browser.
To setup the app, I only need a simple server that hosts static files (for the app written in HTML/CSS/JS and the data in JSON format), and &lt;a href="https://pages.github.com">GitHub Pages&lt;/a> is all that is needed. Specifically, I utilized three (free) services in order to allow the users to upload and search the glosses contained in their Word documents:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GitHub Pages&lt;/strong>&lt;br>
GitHub Pages is used to host my app (&lt;a href="https://github.com/liao961120/gloss-search-frontend">&lt;code>liao961120/gloss-search-frontend&lt;/code>&lt;/a>) and the processed JSON data that contains interlinear glosses (originally written in Word documents)&lt;/li>
&lt;li>&lt;strong>Google Drive&lt;/strong>&lt;br>
Users are provided a GD folder to upload their Word documents&lt;/li>
&lt;li>&lt;strong>Travis CI&lt;/strong>&lt;br>
After uploading their Word documents to GD, users can &lt;a href="https://docs.travis-ci.com/user/triggering-builds">trigger a Travis CI build&lt;/a> by clicking &lt;img src="https://bit.ly/2X2r1aQ" style="display:inline;height:1em;width:auto;margin:0"> on the bottom-left corner of the &lt;a href="https://glosss.yongfu.name">app&lt;/a> (password needed). Under the hood, I encrypted my Travis CI&amp;rsquo;s API token so that when the user enters the correct password, a POST request (containing the decrypted token) is sent to Travis CI to trigger a build. During the build, the Word documents saved in Google Drive are download and processed into JSON format and then pushed back to a GitHub repo that hosts the data.&lt;/li>
&lt;/ul>
&lt;p>The figure below summarizes the flow of the app&amp;rsquo;s data:&lt;/p>
&lt;div class="figure">
&lt;img src="https://img.yongfu.name/posts/gloss-search-webbased.png" style="width:100%">
&lt;p class="caption">Figure 1: The numbers annotated to the arrows indicate the order of the execution. Processes with annotated text appended with &lt;img src="https://img.yongfu.name/icon/user.png" style="display:inline;height:1em;width:auto;margin:0"> indicate that they are triggered by the user. Other processes proceed automatically.&lt;/p>
&lt;/div>
&lt;h2 id="configuration-of-the-travis-build">Configuration of the Travis build&lt;/h2>
&lt;p>Below is the partial configuration&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> of the Travis build that:&lt;/p>
&lt;ol>
&lt;li>download the Word documents from Google Drive&lt;/li>
&lt;li>process the Word documents into a JSON file (and a log file)&lt;/li>
&lt;li>push the resulting files to &lt;a href="https://github.com/liao961120/gloss-search/tree/gh-pages">&lt;code>gloss-search:gh-pages&lt;/code>&lt;/a> (set up in the &lt;code>deploy: &lt;/code> section)&lt;/li>
&lt;/ol>
&lt;p>(1) and (2) is done in the script &lt;a href="https://github.com/liao961120/gloss-search/blob/master/GlossProcessor.py">&lt;code>GlossProcessor.py&lt;/code>&lt;/a>. In the script, I call &lt;a href="https://github.com/GitHub30/gdrive.sh">&lt;code>GitHub30/gdrive.sh&lt;/code>&lt;/a> to download files from Google Drive (this really saved me a large amount of time). Then I use the module &lt;code>python-docx&lt;/code> (described in my previous post) to process the Word documents into a structured JSON file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#f92672">python&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> - &lt;span style="color:#e6db74">&amp;#34;3.7&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#f92672">install&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> - &lt;span style="color:#ae81ff">pip install python-docx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#75715e"># command to run tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> - &lt;span style="color:#ae81ff">python3 GlossProcessor.py https://drive.google.com/drive/folders/${BUDAI_RUKAI}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">pages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#f92672">skip-cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>: &lt;span style="color:#ae81ff">$GH_TOKEN &lt;/span> &lt;span style="color:#75715e"># Set in travis-ci.org dashboard, marked secure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#f92672">keep-history&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="encryptdecrypt-api-token-in-javascript">Encrypt/Decrypt API token in JavaScript&lt;/h2>
&lt;p>Travis CI is normally used as a testing service, but since code is tested by scripts, one can actually write scripts that do things other than testing. Since &lt;a href="https://bookdown.org/yihui/bookdown/github.html">my discovery of using Travis CI to render R Markdown&lt;/a> in the R community, a lot of creative ideas came to me (e.g., using &lt;a href="https://docs.travis-ci.com/user/cron-jobs">Travis Cron Jobs&lt;/a> to regularly &lt;a href="https://yongfu.name/2019/02/17/visualize-language-loss.html">update plots depending on the data from a survey&lt;/a>).&lt;/p>
&lt;p>Usually, a Travis build is triggered by a push to the GiHub repo, a pull request, or a preset cron job. A more advanced way to trigger builds is to utilize Travis CI&amp;rsquo;s API. As described in the &lt;a href="https://docs.travis-ci.com/user/triggering-builds">API document&lt;/a>, to trigger a build on a repo (e.g., &lt;code>liao961120/gloss-search&lt;/code>), one need to send a POST request to the endpoint &lt;code>https://api.travis-ci.org/repo/liao961120%2Fgloss-search/requests&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> along with the API token provided by Travis CI. The JS (Vue) code below is used for sending the POST request to Travis CI:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#a6e22e">triggerBuild&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;https://api.travis-ci.org/repo/liao961120%2Fgloss-search/requests&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">body&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#a6e22e">request&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#a6e22e">branch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;master&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Trigger build from glosss.yongfu.name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">decryptedText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">CryptoJS&lt;/span>.&lt;span style="color:#a6e22e">AES&lt;/span>.&lt;span style="color:#a6e22e">decrypt&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">build_token&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">build_psswd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> ).&lt;span style="color:#a6e22e">toString&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">CryptoJS&lt;/span>.&lt;span style="color:#a6e22e">enc&lt;/span>.&lt;span style="color:#a6e22e">Utf8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Accept&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#e6db74">&amp;#34;Travis-API-Version&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Authorization&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`token &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">decryptedText&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">$http&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>, { &lt;span style="color:#a6e22e">headers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span> }).&lt;span style="color:#a6e22e">then&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#a6e22e">response&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#a6e22e">response&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the variable &lt;code>decryptedText&lt;/code> in the code above.
To prevent my API token from being exposed to the public, I have to encrypt my API token. The encrypted token is saved in the variable &lt;code>build_token&lt;/code>, and the password to decrypt the encrypted token is given to the users privately. To trigger a build with the app, the user needs to enter the correct password (saved to the variable &lt;code>build_psswd&lt;/code>). After the user enters the password, the app can then decrypt the encrypted token to the original API token. The API token is then placed in the POST request header (&lt;code>Authorization: `token ${decryptedText}`&lt;/code>) and send to Travis CI.
The encryption and decryption of the API token is done with &lt;a href="https://github.com/tpenaranda/vue-cryptojs">a Vue wrapper&lt;/a> of the JS library &lt;a href="https://github.com/brix/crypto-js">&lt;code>crypto-js&lt;/code>&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>A rough way to think of this new app (as compared to &lt;a href="https://yongfu.name/2020/04/23/gloss-search.html">the previous one&lt;/a>) is that the functionality of the backend part of the app (i.e., data preprocessing in Python) is replaceced by Travis CI. The old app listens on local file changes in the Word docuemnts, but Travis CI can never provide this functionality. However, the benefit of ease of use (no need to startup a server) is huge as compared to real-time data update provided by a backend server.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>For the full configuration, see &lt;a href="https://github.com/liao961120/gloss-search/blob/master/.travis.yml">https://github.com/liao961120/gloss-search/blob/master/.travis.yml&lt;/a>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Note that the slash separating &lt;code>liao961120&lt;/code> and &lt;code>gloss-search&lt;/code> needs to be converted to &lt;code>%2F&lt;/code> to prevent interpreting &lt;code>liao961120/gloss-search&lt;/code> as different URL segments.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>Travis-CI</category><category>JavaScript</category><category>vue</category></item><item><title>Recreating Leipizig.js with Vue for Interlinear Glossing</title><link>https://yongfu.name/2020/02/22/leipzigvue/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://yongfu.name/2020/02/22/leipzigvue/</guid><description>&lt;p>I noticed &lt;a href="https://bdchauvette.net/leipzig.js">Leipzig.js&lt;/a> from &lt;a href="https://github.com/agricolamz">George Moroz&lt;/a>&amp;rsquo;s GitHub activity (he starred &lt;a href="https://github.com/bdchauvette/leipzig.js/">&lt;code>bdchauvette/leipzig.js&lt;/code>&lt;/a> a few months ago). This JS library is fantastic, and at the moment I saw it, I came up with an idea of building a web app facilitating interlinear glossing.
During Chinese New Year, I finally started on the project. I thought it would be easy since I had some experience with Vue.js before&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, but it turned out that &lt;code>leipzig.js&lt;/code> wasn&amp;rsquo;t designed to work with Vue.&lt;/p>
&lt;h2 id="dynamic-input-interface">Dynamic Input Interface&lt;/h2>
&lt;p>What I had in mind was a web app that, while the user is typing, the rendered glosses get showed &lt;strong>synchronously&lt;/strong> in another panel. Vue&amp;rsquo;s conventional way of doing this is by creating a two-way data binding (&lt;code>v-model&lt;/code>) to capture the user&amp;rsquo;s input and dynamically render the HTML content based on the inputted data. This conflicts with &lt;code>leipzig.js&lt;/code> since it only provides a high level function (&lt;a href="https://github.com/bdchauvette/leipzig.js/wiki/Documentation">&lt;code>Leipzig()&lt;/code>&lt;/a>) to modify existing DOM elements to construct the glosses. Calling &lt;code>Leipzig()&lt;/code> multiple times (without erasing the already rendered HTML) would break the DOM elements, which makes the function hard to work together with Vue&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>After multiple failures of making &lt;code>Leipzig()&lt;/code> to work with Vue, I decided to abandoned &lt;code>leipzig.js&lt;/code> and recreate its functionality with Vue. This wasn&amp;rsquo;t as terrifying as it may seem, since I can use &lt;a href="https://github.com/bdchauvette/leipzig.js/blob/master/dist/leipzig.css">&lt;code>leipzig.js&lt;/code>&amp;rsquo;s CSS rules&lt;/a> directly to help me align the rendered DOM elements by Vue. What I had to do was making sure that Vue generates &lt;a href="https://github.com/bdchauvette/leipzig.js/wiki/Documentation#configclasses">the exact same HTML structure&lt;/a> as &lt;code>leipzig.js&lt;/code>&amp;rsquo;s rendered glosses. The resulting input interface is shown in the GIF below.&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="https://img.yongfu.name/gif/leipzig-vue.gif" alt="Leipzig.js rebuilt with Vue">
&lt;figcaption>Leipzig.js rebuilt with Vue&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>The source code of this vue component can be found in &lt;a href="https://github.com/liao961120/gloss/blob/master/src/components/Leipzig.vue">&lt;code>Leipzig.vue&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="other-parts-of-the-app">Other Parts of the App&lt;/h2>
&lt;p>There are several advantages of adopting Vue instead of using traditional JS approaches to build the app. Since what I wanted to build was an app that can also &lt;strong>store, manage, and export glosses&lt;/strong> for the user, I needed a framework to help me manage this complexity (e.g., &lt;a href="https://github.com/liao961120/gloss/blob/master/src/views/Edit.vue">Vuex&lt;/a>), and Vue provides a good and manageable way to build a complex web app. After learning Vuex and experiencing some failures in my previous &lt;a href="https://github.com/liao961120/viewMark">Vue project&lt;/a> (due to increasing complexity as the app grows larger), I&amp;rsquo;m pretty sure that I could build a better app with less complexity this time. But just when I was moving forward to other parts of the app, I was stuck by other work to do, so I&amp;rsquo;m currently not developing this app. Currently, the only usable part of this app is its dynamic input interface for previewing glosses.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>In 2019 summer, I learned Vue.js on &lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa">The Net Ninja&amp;rsquo;s YouTube channel&lt;/a> and built a &lt;a href="https://viewmark.yongfu.name">markdown editor&lt;/a> for fun.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Though it is possible to create a dynamic input experience with &lt;code>leipizig.js&lt;/code> with a more traditional JS approach. You can read the &lt;a href="https://bdchauvette.net/leipzig.js/theme/js/demo.js">source code&lt;/a> of this &lt;a href="https://bdchauvette.net/leipzig.js/demo/">Live demo of Leipzig.js&lt;/a> to find out how it works!&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><category>vue</category><category>JavaScript</category><category>Linguistics</category></item><item><title>Convert SVGs to PNGs with Your Web Browser</title><link>https://yongfu.name/2019/07/06/svg2png/</link><pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate><guid>https://yongfu.name/2019/07/06/svg2png/</guid><description>&lt;p>I recently found a great &lt;a href="https://courses.edx.org/courses/course-v1:HarvardX+CS50W+Web/course/">course about web programming&lt;/a> on edX and learned a lot from it (I knew little about back-end web development and were unfamiliar with JavaScript). When I learned that it is possible to &lt;a href="https://video.cs50.net/web/2018/spring/lectures/6?t=1h35m5s">&lt;em>draw&lt;/em> an SVG with the mouse in the browser&lt;/a>, some interesting stuff came up to me &amp;mdash; &lt;em>can I download the SVG after I finished drawing?&lt;/em> I found some solutions on the web pretty easily. Meanwhile, another interesting idea came upon &amp;mdash; &lt;em>can I use the browser to convert local SVG images to PNG images?&lt;/em>
It turns out that this is completely possible with pure JavaScript. I started to realize how mighty web browsers are.&lt;/p>
&lt;p>As an exercise to familiarize myself with JavaScript, I implemented this idea in a simple static web page, &lt;a href="https://svg2png.yongfu.name">svg2png&lt;/a>, which can convert multiple SVG images to PNG images (with options to set the resolution of the PNGs).&lt;/p>
&lt;h2 id="no-server-zero-dependencies">No Server, Zero Dependencies&lt;/h2>
&lt;p>One good thing about &lt;a href="https://svg2png.yongfu.name">svg2png&lt;/a> is that the computations are all done in the browser. So compared to other online services (e.g. &lt;a href="https://svgtopng.com/">this&lt;/a>), there are no file upload limits. Also, &lt;a href="https://svg2png.yongfu.name">svg2png&lt;/a> lives on the web, so there is no need to download any thing (instead of a modern browser) before using it.&lt;/p>
&lt;h2 id="how-it-works">How It Works?&lt;/h2>
&lt;p>I used HTML5&amp;rsquo;s &lt;code>&amp;lt;input type='file' multiple&amp;gt;&lt;/code> to let users upload their SVGs. After that, the files are converted into &lt;a href="https://developer.mozilla.org/zh-TW/docs/Web/API/URL/createObjectURL">object URL&lt;/a>s. This allows me to load the SVG images (invisibly) with &lt;code>&amp;lt;img src=objectURL&amp;gt;&lt;/code>, so I can get the information of these images (height and width).&lt;/p>
&lt;p>The second step is to render the SVG on &lt;a href="https://www.w3schools.com/html/html5_canvas.asp">Canvas&lt;/a> with the &lt;a href="https://github.com/canvg/canvg">canvg&lt;/a> library in order to convert it to PNG later (using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob">&lt;code>canvas.toBlob()&lt;/code>&lt;/a>).&lt;/p>
&lt;p>The trick to adjust the DPI of the output PNG is by scaling the height and width of the canvas, which is handily provided by the &lt;a href="https://github.com/canvg/canvg#usage-on-the-browser">&lt;code>scaleWidth&lt;/code> and &lt;code>scaleHeight&lt;/code> options in &lt;code>canvg()&lt;/code>&lt;/a>. But since I have no way to get the size information of the original image directly from the File object retrieved from &lt;code>&amp;lt;input type='file'&amp;gt;&lt;/code>, I have to load the SVG images with the &lt;code>&amp;lt;img&amp;gt;&lt;/code> tags first.&lt;/p>
&lt;p>The source code of this simple project can be found &lt;a href="https://github.com/liao961120/svg2png">here&lt;/a> on GitHub.&lt;/p></description><category>JavaScript</category><category>Web Page</category></item></channel></rss>